import type { Metadata } from 'next'
import localFont from 'next/font/local'
import { NextIntlClientProvider } from 'next-intl'
import { getMessages } from 'next-intl/server'
import { Theme } from '@radix-ui/themes'
import { ThemeProvider } from 'next-themes'

import '../globals.css'
import 'leaflet/dist/leaflet.css'
import '@radix-ui/themes/styles.css'

import { routing } from '../../i18n/routing'

// Types
import { Locale } from '@/src/i18n/request'
import Custom404 from '../404'

const geistSans = localFont({
  src: '../fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
})
const geistMono = localFont({
  src: '../fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
})

export const metadata: Metadata = {
  title: 'HK Carpark',
  description: 'Generated by create next app',
}

export default async function RootLayout({
  children,
  params: { locale },
}: Readonly<{
  children: React.ReactNode
  params: { locale: Locale }
}>) {
  // Ensure that the incoming `locale` is valid
  if (!routing.locales.includes(locale as Locale)) {
    return <Custom404 />
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages()

  return (
    <html lang={locale}>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <ThemeProvider attribute='class'>
          <Theme>
            <NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>
          </Theme>
        </ThemeProvider>
      </body>
    </html>
  )
}
